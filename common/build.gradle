architectury {
    common(rootProject.enabledPlatforms.split(","))
}

loom {
    accessWidenerPath = file("src/main/resources/anything_goes.accesswidener")

    // Should hopefully prevent an empty run directory being generated in common during initial project setup.
    runs {
        client {
            client()
            setConfigName("Common Client")
            ideConfigGenerated(false)
            runDir("../run")
        }
        server {
            server()
            setConfigName("Common Server")
            ideConfigGenerated(false)
            runDir("../run")
        }
    }
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabricLoaderVersion}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:${rootProject.architecturyVersion}"

    // Configured
    // We pick the Fabric version because it seems to be updated later than the Forge version.
    // This should prevent the use of annotations that don't exist on one side.
    // TODO: This isn't a perfect solution, but it's the best I can think of until I switch to using the cursemaven gradle plugin and a single universal version.
    modCompileOnly "curse.maven:configured-${configuredFabricProjectId}:${configuredFabricFileId}"

    // Server Translations API
    modImplementation include("fr.catcore:server-translations-api:${serverTranslationsAPIVersion}")
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

repositories {
    mavenCentral()
}
