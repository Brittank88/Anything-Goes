plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

repositories {
    maven { url "https://maven.quiltmc.org/repository/release/" }
}

architectury {
    platformSetupLoomIde()
    loader("quilt")
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentQuilt.extendsFrom common
}

dependencies {
    modImplementation "org.quiltmc:quilt-loader:${rootProject.quiltLoaderVersion}"
    modApi "org.quiltmc.quilted-fabric-api:quilted-fabric-api:${rootProject.quiltFabricApiVersion}"
    // Remove the next few lines if you don't want to depend on the API
    modApi("dev.architectury:architectury-fabric:${rootProject.architecturyVersion}") {
        // We must not pull Fabric Loader from Architectury Fabric
        exclude group: "net.fabricmc"
        exclude group: "net.fabricmc.fabric-api"
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionQuilt")) { transitive false }
    common(project(path: ":fabric-like", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":fabric-like", configuration: "transformProductionQuilt")) { transitive false }

    // Forge Configs
    modImplementation "net.minecraftforge:forgeconfigapiport-fabric:${forgeConfigApiPortVersion}"

    // Puzzles Lib
    modImplementation "fuzs.puzzleslib:puzzleslib-fabric:${puzzlesLibVersion}"

    // Extensible Enums
    modImplementation(include("fuzs.extensibleenums:extensibleenums-fabric:${extensibleEnumsVersion}"))

    // Catalogue
    modRuntimeOnly "curse.maven:catalogue-${catalogueFabricProjectId}:${catalogueFabricFileId}"

    // Mod Menu
    modRuntimeOnly "com.terraformersmc:modmenu:${modMenuVersion}"
}

processResources {
    duplicatesStrategy DuplicatesStrategy.INCLUDE

    // This will ensure that this task is redone when a value changes.
    inputs.property 'modId'                     , "${modId}"
    inputs.property 'modName'                   , "${modName}"
    inputs.property 'modVersion'                , "${modVersion}"
    inputs.property 'modDescription'            , "${modDescription}"
    inputs.property 'modGroup'                  , project.group
    inputs.property 'modPageUrl'                , "${modSourceUrl}"
    inputs.property 'modIssueUrl'               , "${modIssueUrl}"
    inputs.property 'modLicense'                , "${modLicense}"
    inputs.property 'modLogoFile'               , "${modLogoFile}"
    inputs.property 'modIconFile'               , "${modIconFile}"
    inputs.property 'modIconItem'               , "${modIconItem}"
    inputs.property 'configuredBackgroundFile'  , "${configuredBackgroundFile}"
    inputs.property 'modAuthor'                 , "${modAuthor}"
    inputs.property 'minFabricLoaderVersion'    , "${minFabricLoaderVersion}"
    inputs.property 'minFabricApiVersion'       , "${minFabricApiVersion}"
    inputs.property 'minMinecraftVersion'       , "${minMinecraftVersion}"
    inputs.property 'nextMinecraftVersion'      , rootProject.getNextVersion("${minMinecraftVersion}")
    inputs.property 'architecturyVersion'       , "${architecturyVersion}"
    inputs.property 'packFormat'                , "${packFormat}"
    inputs.property 'mainEntryPoint'            , "${project.group}.quilt.${rootProject.name}Quilt"
    inputs.property 'modQuiltEnvironment'       , "${modQuiltEnvironment}"
    inputs.property 'minJavaVersion'            , "${minJavaVersion}"
    inputs.property 'forgeConfigApiPortVersion' , "${forgeConfigApiPortVersion}"
    inputs.property 'puzzleslibVersion'         , "${puzzlesLibVersion}"
    inputs.property 'extensibleEnumsVersion'    , "${extensibleEnumsVersion}"

    // replace stuff in fabric.mod.json and pack.mcmeta
    filesMatching ('quilt.mod.json') {
        expand (
                'modId'                     : "${modId}",
                'modName'                   : "${modName}",
                'modVersion'                : "${modVersion}",
                'modDescription'            : "${modDescription}",
                'modGroup'                  : project.group,
                'modPageUrl'                : "${modSourceUrl}",
                'modIssueUrl'               : "${modIssueUrl}",
                'modLicense'                : "${modLicense}",
                'modLogoFile'               : "${modLogoFile}",
                'modIconFile'               : "${modIconFile}",
                'modIconItem'               : "${modIconItem}",
                'configuredBackgroundFile'  : "${configuredBackgroundFile}",
                'modAuthor'                 : "${modAuthor}",
                'minQuiltLoaderVersion'     : "${minQuiltLoaderVersion}",
                'minQuiltBaseVersion'       : "${minQuiltBaseVersion}",
                'minMinecraftVersion'       : "${minMinecraftVersion}",
                'nextMinecraftVersion'      : rootProject.getNextVersion("${minMinecraftVersion}"),
                'architecturyVersion'       : "${architecturyVersion}",
                'mainEntryPoint'            : "${project.group}.fabric.${rootProject.name}Fabric",
                'modQuiltEnvironment'       : "${modQuiltEnvironment}",
                'minJavaVersion'            : "${minJavaVersion}",
                'forgeConfigApiPortVersion' : "${forgeConfigApiPortVersion}",
                'puzzleslibVersion'         : "${puzzlesLibVersion}",
                'extensibleEnumsVersion'    : "${extensibleEnumsVersion}"
        )
    }

    filesMatching ('pack.mcmeta') {
        expand (
                'modDescription'    : "${modDescription}",
                'packFormat'        : "${packFormat}"
        )
    }
}

javadoc {
    source project(":common").sourceSets.main.allJava
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null

    // Resolves FileSystem errors when building with org.gradle.parallel=true.
    mustRunAfter(project(":fabric").getTasks().named("remapJar"))
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenQuilt(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}
